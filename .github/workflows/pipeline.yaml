name: Fast-API CI/CD Pipeline

on:
  push:
    branches:
      - "**"
    tags:
      - "v*"
  pull_request:
    branches:
      - "**"

env:
  PYTHON_VERSION: "3.10"
  TF_VERSION: "1.12.1"
  HELM_VERSION: "3.18.2"

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: pytest

  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      image_tag: ${{ steps.extract_tag.outputs.tag }}
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
      - name: Extract Git tag
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}"
      - uses: mr-smithers-excellent/docker-build-push@v6.5
        name: Build and Push Docker Image
        with:
          image: eneco/wallace-sre-challenge
          tags: ${{ steps.extract_tag.outputs.tag }}
          addLatest: true
          addTimestamp: true
          appendMode: true
          registry: 586855150137.dkr.ecr.eu-west-1.amazonaws.com
          dockerfile: Dockerfile
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1

  terraform:
    name: Terraform Apply (Main Only)
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build
      - docker-build
    defaults:
      run:
        working-directory: ./deploy
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "TF_VERSION=${{ env.TF_VERSION }}" >> $GITHUB_ENV
          echo "HELM_VERSION=${{ env.HELM_VERSION }}" >> $GITHUB_ENV
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - run: terraform init
      - run: terraform plan
      - run: terraform apply -auto-approve -var="image.tag=${{ needs.docker-build.outputs.image_tag }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}